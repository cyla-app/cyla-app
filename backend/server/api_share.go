/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ShareApiController binds http requests to an api service and writes the service results to the http response
type ShareApiController struct {
	service ShareApiServicer
}

// NewShareApiController creates a default api controller
func NewShareApiController(s ShareApiServicer) Router {
	return &ShareApiController{service: s}
}

// Routes returns all of the api route for the ShareApiController
func (c *ShareApiController) Routes() Routes {
	return Routes{
		{
			"GetShares",
			strings.ToUpper("Get"),
			"/share/{userId}",
			Authorize(c.GetShares),
		},
		{
			"ShareAuth",
			strings.ToUpper("Post"),
			"/share/auth/{shareId}",
			c.ShareAuth,
		},
		{
			"ShareDays",
			strings.ToUpper("Post"),
			"/share/{userId}",
			Authorize(c.ShareDays),
		},
	}
}

// GetShares -
func (c *ShareApiController) GetShares(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId := params["userId"]
	result, err := c.service.GetShares(r.Context(), userId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ShareAuth -
func (c *ShareApiController) ShareAuth(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	shareId := params["shareId"]
	sharedPwdDto := &SharedPwdDto{}
	if err := json.NewDecoder(r.Body).Decode(&sharedPwdDto); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.ShareAuth(r.Context(), shareId, *sharedPwdDto)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ShareDays -
func (c *ShareApiController) ShareDays(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId := params["userId"]
	shareInfoUpload := &ShareInfoUpload{}
	if err := json.NewDecoder(r.Body).Decode(&shareInfoUpload); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.ShareDays(r.Context(), userId, *shareInfoUpload)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, result.Headers, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
