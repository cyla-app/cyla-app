/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
)

// UserApiService is a service that implents the logic for the UserApiServicer
// This service should implement the business logic for every endpoint for the UserApi API.
// Include any external packages or services that will be required by this service.
type UserApiService struct {
}

// NewUserApiService creates a default api service
func NewUserApiService() UserApiServicer {
	return &UserApiService{}
}

// CreateUser -
//TODO remove code duplication for error handling
func (s *UserApiService) CreateUser(ctx context.Context, user User) (ImplResponse, error) {
	userId, err := DBConnection.CreateUser(ctx, user)
	if err == nil {
		return Response(200, userId), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// GetRestoreData -
func (s *UserApiService) GetRestoreData(ctx context.Context, userId string) (ImplResponse, error) {
	backupKey, err := DBConnection.GetRestoreDate(ctx, userId)
	if err == nil {
		return Response(200, backupKey), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// GetUserById -
func (s *UserApiService) GetUserById(ctx context.Context, userId string) (ImplResponse, error) {
	user, err := DBConnection.GetUser(ctx, userId)
	if err == nil {
		return Response(200, user), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// UpdateUser -
func (s *UserApiService) UpdateUser(ctx context.Context, userId string, user User) (ImplResponse, error) {
	err := DBConnection.UpdateUser(ctx, userId, user)
	if err == nil {
		return Response(200, "Ok"), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}
