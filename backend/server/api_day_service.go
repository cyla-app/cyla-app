/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
)

// DayApiService is a service that implents the logic for the DayApiServicer
// This service should implement the business logic for every endpoint for the DayApi API.
// Include any external packages or services that will be required by this service.
type DayApiService struct {
}

// NewDayApiService creates a default api service
func NewDayApiService() DayApiServicer {
	return &DayApiService{}
}

// CreateDayEntry -
func (s *DayApiService) CreateDayEntry(ctx context.Context, userId string, day Day) (ImplResponse, error) {
	//TODO Server-error vs client-error
	err := DBConnection.CreateDayEntry(ctx, userId, day)
	if err == nil {
		return Response(200, "Ok"), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// GetDayByUserAndRange -
func (s *DayApiService) GetDayByUserAndRange(ctx context.Context, userId string, startDate string, endDate string) (ImplResponse, error) {
	days, err := DBConnection.GetDayByUserAndRange(ctx, userId, startDate, endDate)
	if err == nil {
		return Response(200, days), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// GetDaysByUserIdAndDate -
func (s *DayApiService) GetDaysByUserIdAndDate(ctx context.Context, userId string, date []string) (ImplResponse, error) {
	days, err := DBConnection.GetDaysByUserIdAndDate(ctx, userId, date)
	if err == nil {
		return Response(200, days), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}

// UpdateDayEntry -
func (s *DayApiService) UpdateDayEntry(ctx context.Context, userId string, day Day) (ImplResponse, error) {
	err := DBConnection.UpdateDayEntry(ctx, userId, day)
	if err == nil {
		return Response(200, "Ok"), err
	}
	httpError, ok := err.(*HttpError)
	if ok {
		return Response(httpError.Code, nil), httpError
	} else {
		return Response(500, nil), err
	}
}
