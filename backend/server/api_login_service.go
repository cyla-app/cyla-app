/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
    "errors"
    "github.com/cossacklabs/themis/gothemis/compare"
    "github.com/gorilla/websocket"
    "log"
)

// LoginApiService is a service that implents the logic for the LoginApiServicer
// This service should implement the business logic for every endpoint for the LoginApi API.
// Include any external packages or services that will be required by this service.
type LoginApiService struct {
}

// NewLoginApiService creates a default api service
func NewLoginApiService() LoginApiServicer {
	return &LoginApiService{}
}

// LoginUser -
func (s *LoginApiService) LoginUser(ctx context.Context, username string, conn *websocket.Conn) (ImplResponse, error) {
	ret, err := DBConnection.LoginUser(ctx, username)
    comparisonServer, err := compare.New()
    comparisonServer.Append([]byte("testsecret"))
    log.Println("Starting auth")
    for {
        mt, message, err := conn.ReadMessage()
        if err != nil {
            log.Println("read:", err)
            break
        }
        if mt != websocket.BinaryMessage {
            msg := "unexpected message type"
            err = errors.New(msg)
            log.Println(msg)
            break
        }

        response, err := comparisonServer.Proceed(message)
        if err != nil {
            log.Println("Comparison error: ", err)
            break
        }

        err = conn.WriteMessage(websocket.BinaryMessage, response)
        if err != nil {
            log.Println("write:", err)
            break
        }

        //Get result of comparison to see if it is done and send the final answer to the client
        comparisonStatus, err := comparisonServer.Result()
        if err != nil {
            log.Println("Comparison state error:", err)
        }
        if comparisonStatus == compare.Match {
            log.Println("Comparison successful")
            conn.WriteMessage(websocket.BinaryMessage, []byte("placeholderToken"))
        }
        if comparisonStatus == compare.NoMatch {
            log.Println("Comparison unsuccessful")
            conn.WriteMessage(websocket.BinaryMessage, []byte("NOUP"))
        }
    }
    log.Println("Login Done")
	return httpResponseWithBody(ret, err)
}
