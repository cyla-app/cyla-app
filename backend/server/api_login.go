/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"github.com/cossacklabs/themis/gothemis/compare"
	"github.com/gorilla/websocket"
	"log"
	"net/http"
	"strings"
)

// A LoginApiController binds http requests to an api service and writes the service results to the http response
type LoginApiController struct {
	service LoginApiServicer
}

// NewLoginApiController creates a default api controller
func NewLoginApiController(s LoginApiServicer) Router {
	return &LoginApiController{service: s}
}

// Routes returns all of the api route for the LoginApiController
func (c *LoginApiController) Routes() Routes {
	return Routes{
		{
			"LoginUser",
			strings.ToUpper("Get"),
			"/login",
			c.LoginUser,
		},
	}
}

// LoginUser -
func (c *LoginApiController) LoginUser(w http.ResponseWriter, r *http.Request) {
	comparisonServer, err := compare.New()
	comparisonServer.Append([]byte("testsecret"))

	var upgrader = websocket.Upgrader{CheckOrigin: func(r *http.Request) bool {
		return true
	}}
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("Upgrade error:", err)
		var status = 500
		EncodeJSONResponse(err.Error(), &status, w)
		return
	}
	defer conn.Close()
	for {
		mt, message, err := conn.ReadMessage()
		if err != nil {
			log.Println("read:", err)
			break
		}
		log.Printf("recv: %s", message)
		log.Println(message)

		response, err := comparisonServer.Proceed(message)
		if err != nil {
			log.Println("Comparison error: ", err)
		}

		err = conn.WriteMessage(mt, response)
		if err != nil {
			log.Println("write:", err)
			break
		}
		if response == nil {
			log.Println("Comparison done")
			break
		}
	}
	result, err := comparisonServer.Result()
	if err != nil {
		log.Println("Error during result: ", err)
	}
	if result == compare.Match {
		log.Println("Successful")
	}

}
