/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DayApiController binds http requests to an api service and writes the service results to the http response
type DayApiController struct {
	service DayApiServicer
}

// NewDayApiController creates a default api controller
func NewDayApiController(s DayApiServicer) Router {
	return &DayApiController{service: s}
}

// Routes returns all of the api route for the DayApiController
func (c *DayApiController) Routes() Routes {
	return Routes{
		{
			"CreateDayEntry",
			strings.ToUpper("Post"),
			"/day/{userId}",
			c.CreateDayEntry,
		},
		{
			"GetDayByUserAndRange",
			strings.ToUpper("Get"),
			"/day/{userId}/byRange",
			c.GetDayByUserAndRange,
		},
		{
			"GetDaysByUserIdAndDate",
			strings.ToUpper("Get"),
			"/day/{userId}/byDate",
			c.GetDaysByUserIdAndDate,
		},
		{
			"UpdateDayEntry",
			strings.ToUpper("Put"),
			"/day/{userId}",
			c.UpdateDayEntry,
		},
	}
}

// CreateDayEntry -
func (c *DayApiController) CreateDayEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId := params["userId"]
	day := &Day{}
	if err := json.NewDecoder(r.Body).Decode(&day); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.CreateDayEntry(r.Context(), userId, *day)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDayByUserAndRange -
func (c *DayApiController) GetDayByUserAndRange(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userId := params["userId"]
	startDate := query.Get("startDate")
	endDate := query.Get("endDate")
	result, err := c.service.GetDayByUserAndRange(r.Context(), userId, startDate, endDate)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDaysByUserIdAndDate -
func (c *DayApiController) GetDaysByUserIdAndDate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userId := params["userId"]
	date := strings.Split(query.Get("date"), ",")
	result, err := c.service.GetDaysByUserIdAndDate(r.Context(), userId, date)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateDayEntry -
func (c *DayApiController) UpdateDayEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId := params["userId"]
	day := &Day{}
	if err := json.NewDecoder(r.Body).Decode(&day); err != nil {
		w.WriteHeader(500)
		return
	}

	result, err := c.service.UpdateDayEntry(r.Context(), userId, *day)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
