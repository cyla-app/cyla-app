/*
 * Cyla App API
 *
 * API for the period tracking app 'Cyla'
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"context"
	"fmt"
	server "github.com/cyla-app/cyla-app/server"
	redis "github.com/go-redis/redis/v8"
	"log"
	"net/http"
	"os"
)

var ctx = context.Background()
func ExampleClient() {
	rdb := redis.NewClient(&redis.Options{
		Addr:     "redis:6379",
		Password: os.Getenv("REDIS_PASSWORD"), // no password set
		DB:       0,  // use default DB
	})

	err := rdb.Set(ctx, "key", "value", 0).Err()
	if err != nil {
		panic(err)
	}

	val, err := rdb.Get(ctx, "key").Result()
	if err != nil {
		panic(err)
	}
	fmt.Println("key", val)

	val2, err := rdb.Get(ctx, "key2").Result()
	if err == redis.Nil {
		fmt.Println("key2 does not exist")
	} else if err != nil {
		panic(err)
	} else {
		fmt.Println("key2", val2)
	}
	// Output: key value
	// key2 does not exist
}

func main() {
	log.Printf("Server started")
	ExampleClient()
	log.Printf("Other stuff")

	ActivityApiService := server.NewActivityApiService()
	ActivityApiController := server.NewActivityApiController(ActivityApiService)

	BleedingApiService := server.NewBleedingApiService()
	BleedingApiController := server.NewBleedingApiController(BleedingApiService)

	CervicalApiService := server.NewCervicalApiService()
	CervicalApiController := server.NewCervicalApiController(CervicalApiService)

	CervixApiService := server.NewCervixApiService()
	CervixApiController := server.NewCervixApiController(CervixApiService)

	DayApiService := server.NewDayApiService()
	DayApiController := server.NewDayApiController(DayApiService)

	DesireApiService := server.NewDesireApiService()
	DesireApiController := server.NewDesireApiController(DesireApiService)

	MoodApiService := server.NewMoodApiService()
	MoodApiController := server.NewMoodApiController(MoodApiService)

	PainApiService := server.NewPainApiService()
	PainApiController := server.NewPainApiController(PainApiService)

	TemperatureApiService := server.NewTemperatureApiService()
	TemperatureApiController := server.NewTemperatureApiController(TemperatureApiService)

	UserApiService := server.NewUserApiService()
	UserApiController := server.NewUserApiController(UserApiService)

	router := server.NewRouter(ActivityApiController, BleedingApiController, CervicalApiController, CervixApiController, DayApiController, DesireApiController, MoodApiController, PainApiController, TemperatureApiController, UserApiController)

	log.Fatal(http.ListenAndServe(":5000", router))
}
